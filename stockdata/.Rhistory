library(purrr)
reduce(lahmanNames, intersect)
lahmanNames
lahmanNames <- LahmanData
reduce(lahmanNames, intersect)
reduce(lahmanNames, intersect)
reduce(lahmanDAta, intersect)
reduce(lahmanData, intersect)
library(Lahman)
lahmanNames
lahmanNames
library(Lahman)
str(lahmanNames)
players
Lahman::Allstar
Lahman
LahmanData
sum
ds <- options(digits.secs=6) # so we can see the change
ds
x <- xts(1:10, as.POSIXct("2011-01-21") + c(1,1,1,2:8)/1e3)
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(quantmod)
start <- as.Date("2016-11-18")
end <- as.Date("2017-12-15")
ltcData <- getSymbols("LTC-USD", src = "yahoo", from = start, to = end, auto.assign = FALSE)
candleChart(ltcData, col=TRUE, theme=chartTheme('white'), log.scale=TRUE, name="LTC" )
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(cars)
summary(cars)
plot(pressure)
ret <- c(5, 2, 3, 7, 8, 3, 5, 9, 1, 4, 6, 3)
# First 6 months of returns
ret[1:6]
# Just March and May
ret[c("Mar","May")]
# Omit the first month of returns
ret[-1]
ret <- c(5, 2, 3, 7, 8, 3, 5, 9, 1, 4, 6, 3)
names(ret) <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# First 6 months of returns
ret[1:6]
# Just March and May
ret[c("Mar","May")]
# Omit the first month of returns
ret[-1]
startTime <- "2018-01-01"
as.POSIXct(startTime)
Sys.timezone()
Sys.timezone("EST")
Sys.timezone() < "EST"
Sys.setenv(TZ='America/New_York')
as.POSIXct(startTime)
timestamp()
##------ Mon Jan 22 00:30:04 2018 ------##
timestamp <- function() {
as.character(round(as.numeric(Sys.time()) * 1e3))
}
timestamp
timestamp(now)
now()
Sys.info()
Sys.time()
?now
?time
Sys.time()
now <- Sys.time()
now
timestamp(now)
timestamp()
timestamp <- function() {
as.character(round(as.numeric(Sys.time()) * 1e3))
}
as.character(round(as.numeric(now * 1e3))
)
as.character(round(as.numeric(now) * 1e3))
converted <- as.character(round(as.numeric(now) * 1e3))
length(converted)
?lenght
?length
Sys.time()
?new.env
Sys.time()
startTime <- Sys.time()
startTime
timestamp <- function() {
as.character(round(as.numeric(Sys.time()) * 1e3))
}
timestamp(startTime)
as.character(round(as.numeric(Sys.time()) * 1e3))
as.character(round(as.numeric(startTime * 1e3))
as.character(round(as.numeric(startTime) * 1e3))
as.character(round(as.numeric(startTime * 1e3))
)
as.character(round(as.numeric(startTime * 1e3)
)
)
as.character(round(as.numeric(startTime) * 1e3))
Sys.setenv(TZ='America/New_York')
library(jsonlite)
library(httr)
library(zoo)
library(R.utils)
library(devtools)
library(digest)
library(snakecase)
library(futile.logger)
library(data.table)
library(binancer)
setwd("~/rProgramming/Trading/crypto/")
rootdir <- "~/rProgramming/Trading/crypto/"
datadir <- "~/rProgramming/Trading/crypto/stockdata/"
functiondir <- "~/rProgramming/Trading/crypto/functions/"
binance_key = "tFcWf6iX7cfa1IHCoXcRk1r4gP5KXNa4pM35jueTgugGStYQasHS6QGDR8xDl3oq"
binance_secret = "tjSXnPxqogrcq68bOmJpPQgi0cae8867Pll0ZxG2AJvb31sLvdgduSffXtpgEXbJ"
binance_credentials(binance_key, binance_secret)
DATA
DATA <- list()
setwd(datadir)
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- get_klines(toload[i], interval = "4h", limit = 1080)
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
# write.zoo(df, file = "AADABTC.csv", sep = ",")
write.csv(df, file = paste0(toload[i], ".csv"), sep ="," ,row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
toload <- S
setwd(functiondir)
files.sources = list.files()
sapply(files.sources, source)
setwd(datadir)
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- get_klines(toload[i], interval = "4h", limit = 1080)
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
# write.zoo(df, file = "AADABTC.csv", sep = ",")
write.csv(df, file = paste0(toload[i], ".csv"), sep ="," ,row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
toload <- S
S <- binance_symbols()
toload <- S
setwd(functiondir)
files.sources = list.files()
sapply(files.sources, source)
setwd(datadir)
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- get_klines(toload[i], interval = "4h", limit = 1080)
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
# write.zoo(df, file = "AADABTC.csv", sep = ",")
write.csv(df, file = paste0(toload[i], ".csv"), sep ="," ,row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
column_names <- c("open_time", "open", "high", "low", "close", "volume", "close_time",
"quote_asset_volume", "trades", "taker_buy_base_asset_volume",
"taker_buyer_quote_volume", "symbol")
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- get_klines(toload[i], interval = "4h", limit = 1080)
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
# write.zoo(df, file = "AADABTC.csv", sep = ",")
write.csv(df, file = paste0(toload[i], ".csv"), sep ="," ,row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
setwd(rootdir)
dump(list = c("invalid"), "invalid.R")
setwd(datadir)
S <- sub(".csv", "", list.files())
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), index = 1, header = TRUE, sep = ",", tz = "")
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
DATA
head(DATA)
str(DATA)
DATA[[ADABTC]
]
DATA[[ADABTC]]
DATA[ADABTC]
DATA[[1]]
DATA[$ADABTC]
DATA[[$ADABTC]]
DATA[[ADABTC]]
i
DATA[["ADABTC"]]
start(DATA[["ADABTC"]])
end(DATA[["ADABTC"]])
setwd(datadir)
S <- sub(".csv", "", list.files())
require(data.table)
DATA <- list()
DATA
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- (DATA[[i]])[order(DATA[[i]][["Date"]], decreasing = FALSE)]
}
DATA[["ADABTC"]][[index()]]
DATA[["ADABTC"]][[index]]
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
str(DATA)
i
i = "ADABTC"
i
str(DATA[["ADABTC"]])
end(DATA[["ADABTC"]])
end(DATA[["ADABTC"]])
for(i in S){
suppressWarnings(
DATA[[i]] <- read.zoo(paste0(i, ".csv"), index = 1, header = TRUE, sep = ",", tz = "")
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
# 2.6
## get current time
currentTime <- Sys.time()
for(i in S){
suppressWarnings(
DATA[[i]] <- read.zoo(paste0(i, ".csv"), index = 1, header = TRUE, sep = ",", tz = "")
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
# 2.6
## get current time
currentTime <- Sys.time()
DATA <- list()
DATA
for(i in S){
suppressWarnings(
DATA[[i]] <- read.zoo(paste0(i, ".csv"), index = 1, header = TRUE, sep = ",", tz = "")
)
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
str(DATA[[1]])
currentTime <- Sys.time()
i = "ADABTC"
maxdate <- end(DATA[[i]])
maxdate
str(maxdate)
as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 4
maxdate <- start(DATA[[i]])
as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 4
hours <- function(u) {
x <- u * 3600
return(x)
}
hours(2)
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 4 {
maxdate <- maxdate + hours(4)
}
maxdate
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 4) {
maxdate <- maxdate + hours(4)
}
maxdate
maxdate <- end(DATA[[i]])
maxdate
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 4) {
maxdate <- maxdate + hours(4)
}
maxdate
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 1) {
maxdate <- maxdate + hours(4)
}
maxdate
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit))
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit))
get_klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit))
get_klines2 <- function(symbol, interval, limit = 500) {
interval <- match.arg(interval)
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit))
klines <- rbindlist(klines)
## drop last dummy column
klines <- klines[, -12]
names(klines) <- c(
'open_time',
'open',
'high',
'low',
'close',
'volume',
'close_time',
'quote_asset_volume',
'trades',
'taker_buy_base_asset_volume',
'taker_buy_quote_asset_volume')
for (v in names(klines)) {
klines[, (v) := as.numeric(get(v))]
}
for (v in c('open_time', 'close_time')) {
klines[, (v) := as.POSIXct(get(v)/1e3, origin = '1970-01-01')]
}
## return
klines[, symbol := symbol]
klines
}
get_klines2("ADABTC")
get_klines2("ADABTC", "4h")
get_klines2("ADABTC", "1d")
get_klines2 <- function(symbol, interval, limit = 500) {
#  interval <- match.arg(interval)
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit))
klines <- rbindlist(klines)
## drop last dummy column
klines <- klines[, -12]
names(klines) <- c(
'open_time',
'open',
'high',
'low',
'close',
'volume',
'close_time',
'quote_asset_volume',
'trades',
'taker_buy_base_asset_volume',
'taker_buy_quote_asset_volume')
for (v in names(klines)) {
klines[, (v) := as.numeric(get(v))]
}
for (v in c('open_time', 'close_time')) {
klines[, (v) := as.POSIXct(get(v)/1e3, origin = '1970-01-01')]
}
## return
klines[, symbol := symbol]
klines
}
get_klines2("ADABTC", "1d")
klines2 <- get_klines2("ADABTC", "1d")
klines2
head(klines2)
maxdate
startTime = maxdate
startTime
startTime <- as.character(round(as.numeric(startTime * 1e3)))
startTime
str(startTime)
sys.Time()
Sys.time()
startTime <- sys.time()
startTime <- Sys.time()
startTime
startTime <- as.character(round(as.numeric(startTime * 1e3)))
timestamp()
startTime * 1e3
str(startTime)
str(Sys.time)
str(Sys.time())
get_klines2 <- function(symbol, interval, limit = 500) {
#  interval <- match.arg(interval)
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit,
startTime = startTime))
startTime <- "1516634626946"
klines <- rbindlist(klines)
## drop last dummy column
klines <- klines[, -12]
names(klines) <- c(
'open_time',
'open',
'high',
'low',
'close',
'volume',
'close_time',
'quote_asset_volume',
'trades',
'taker_buy_base_asset_volume',
'taker_buy_quote_asset_volume')
for (v in names(klines)) {
klines[, (v) := as.numeric(get(v))]
}
for (v in c('open_time', 'close_time')) {
klines[, (v) := as.POSIXct(get(v)/1e3, origin = '1970-01-01')]
}
## return
klines[, symbol := symbol]
klines
}
get_klines2("ADABTC", "4h")
get_klines2 <- function(symbol, interval, limit = 500) {
#  interval <- match.arg(interval)
startTime <- "1516634626946"
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit,
startTime = startTime))
klines <- rbindlist(klines)
## drop last dummy column
klines <- klines[, -12]
names(klines) <- c(
'open_time',
'open',
'high',
'low',
'close',
'volume',
'close_time',
'quote_asset_volume',
'trades',
'taker_buy_base_asset_volume',
'taker_buy_quote_asset_volume')
for (v in names(klines)) {
klines[, (v) := as.numeric(get(v))]
}
for (v in c('open_time', 'close_time')) {
klines[, (v) := as.POSIXct(get(v)/1e3, origin = '1970-01-01')]
}
## return
klines[, symbol := symbol]
klines
}
get_klines2("ADABTC", "4h")
get_klines2 <- function(symbol, interval, limit = 500, startTime) {
#  interval <- match.arg(interval)
startTime <- "1516634626946"
klines <- binance_query(
endpoint = 'api/v1/klines',
params   = list(symbol   = symbol,
interval = interval,
limit    = limit,
startTime = startTime))
klines <- rbindlist(klines)
## drop last dummy column
klines <- klines[, -12]
names(klines) <- c(
'open_time',
'open',
'high',
'low',
'close',
'volume',
'close_time',
'quote_asset_volume',
'trades',
'taker_buy_base_asset_volume',
'taker_buy_quote_asset_volume')
for (v in names(klines)) {
klines[, (v) := as.numeric(get(v))]
}
for (v in c('open_time', 'close_time')) {
klines[, (v) := as.POSIXct(get(v)/1e3, origin = '1970-01-01')]
}
## return
klines[, symbol := symbol]
klines
}
get_klines2("ADABTC", "4h")
