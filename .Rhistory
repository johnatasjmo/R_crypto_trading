tiingo_get("GPRO", "2017-01-01")
tiingo_get("GPRO", 2017-10-01")
tiingo_get("GPRO", "2017-10-01")
tiingo_get("GPRO", "2017-10-01")
tiingo_get <- function(sym, start_date = "2010-01-01", end_date,
token = Sys.getenv("TIINGO_TOKEN")){
require(httr)
require(jsonlite)
require(tidyverse)
require(hrbrthemes)
res <- GET(url = sprintf("https://api.tiingo.com/tiingo/daily/%s/prices", sym),
query = list(startDate = start_date, endDate = end_date), content_type_json(),
add_headers(Authorization = sprintf("Token %s", token)))
stop_for_status(res)
select(content(res, as = "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE) %>%
as_tibble() %>% readr::type_convert(), adjClose, adjHigh, adjLow, adjOpen, adjVolume)
}
GPRO <- tiingo_get("GPRO")
tiingo_get <- function(sym, start_date = "2010-01-01", end_date,
token = Sys.getenv("TIINGO_TOKEN")){
require(httr)
require(jsonlite)
require(tidyverse)
require(hrbrthemes)
res <- GET(url = sprintf("https://api.tiingo.com/tiingo/daily/%s/prices", sym),
query = list(startDate = start_date, endDate = end_date), content_type_json(),
add_headers(Authorization = sprintf("Token %s", token)))
stop_for_status(res)
select(content(res, as = "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE) %>%
as_tibble() %>% readr::type_convert(), adjClose, adjHigh, adjLow, adjOpen, adjVolume)
}
GPRO <- tiingo_get("GPRO")
tiingo_get <- function(sym, start_date = "2010-01-01", end_date,
token = Sys.getenv("TIINGO_TOKEN")){
require(httr)
require(jsonlite)
require(tidyverse)
require(hrbrthemes)
res <- GET(url = sprintf("https://api.tiingo.com/tiingo/daily/%s/prices", sym),
query = list(startDate = start_date, endDate = end_date), content_type_json(),
add_headers(Authorization = sprintf("Token %s", token)))
stop_for_status(res)
content(res, as = "text", encoding = "UTF-8") %>% fromJSON(flatten = TRUE) %>%
as_tibble() %>% readr::type_convert()
}
GPRO <- tiingo_get("GPRO")
GPRO <- tiingo_get("GPRO", "2017-10-10")
GPRO <- tiingo_get("GPRO", end_date = "2017-10-10")
tail(GPRO)
i <- GPRO
i <- select(i, adjClose, adjHigh, adjLow, adjOpen, adjVolume)
col_order <- c("adjOpen", "adjHigh", "adjLow",
"adjClose", "adjVolume")
i <- i[, col_order]
i <- rename(i, Open = adjOpen, High = adjHigh, Low = adjLow, Close = adjClose, Volume = adjVolume)
tail(i)
i <- GPRO
i <- "GPRO"
tiingo_get(i , start_date = "2017-01-01", end_date = "2017-10-01")
i <- "GPRO"
df <- tiingo_get(i , start_date = "2017-01-01", end_date = "2017-10-01")
df <- select(df, date, adjClose, adjHigh, adjLow, adjOpen, adjVolume)
col_order <- c("date", adjOpen", "adjHigh", "adjLow",  "adjClose", "adjVolume")
# change order of columns
df <- df[, col_order]
# rename column names
df <- rename(df, Open = adjOpen, High = adjHigh, Low = adjLow, Close = adjClose, Volume = adjVolume)
i <- "GPRO"
df <- tiingo_get(i , start_date = "2017-01-01", end_date = "2017-10-01")
df <- select(df, date, adjClose, adjHigh, adjLow, adjOpen, adjVolume)
col_order <- c("date", "adjOpen", "adjHigh", "adjLow",  "adjClose", "adjVolume")
df <- df[, col_order]
df <- rename(df, Open = adjOpen, High = adjHigh, Low = adjLow, Close = adjClose, Volume = adjVolume)
tail(df)
args(av_get)
str(df)
class(df)
dfZOO <- read.zoo(df, format = "%Y-%m-%d")
dfZOO <- read.zoo(df, index.column = "date")
dfZOO <- read.zoo(df, index = "date")
dfZOO <- read.zoo(df)
args(read.zoo)
dfZOO <- read.zoo(df, index.column = 1)
?read.zoo
dfZOO <- zoo(df, index.column = 1)
dfZOO <- read.zoo(df)
str(df)
dfZOO <- read.zoo(df, index = "date", format = "%Y-%m-%d")
dfZOO <- read.zoo(df, index = "date", format = "%Y-%m-%d", tz = "")
dfZOO <- read.zoo(df, index = "date", format = "%Y.%m.%d", tz = "")
dfZOO <- read.zoo(df, index = 1:2 , format = "%Y.%m.%d", tz = "")
dfZOO <- read.zoo(df, index = "date" , format = "%Y.%m.%d", tz = "")
dfZOO <- read.zoo(df, index = "date")
dfZOO <- read.zoo(df, index = 1)
dfZOO <- read.zoo(df, index = 2)
dfZOO <- read.zoo(df, index = 1:2)
dfZOO <- read.zoo(df, index.column = 1, header = TRUE, format="%Y-%m-%d", FUN=as.POSIXct)
dfZOO <- read.zoo( transform( df, Date = as.POSIXct(Date) ), FUN = identity )
dfZOO <- read.zoo( transform( df, Date = as.POSIXct(date) ), FUN = identity )
str(dfZOO)
tail(dfZOO)
str(df)
tail(df)
dfZOO <- read.zoo( transform( df, Date = as.POSIXct(date) ))
str(dfZOO)
tail(dfZOO)
dfZOO <- read.zoo( transform( df, i = as.POSIXct(date) ))
dfZOO < read.zoo(df, index = as.POSIXct(date))
dfZOO < read.zoo(df, index = as.POSIXct(date))
dfZOO < read.zoo(df)
dfZOO <- read.zoo(df, index = as.POSIXct(date))
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
abline(h=0.5, col="green")
skip()
abline(h=0.05, col="green")
dist(dFsm)
skip()
heatmap(dataMatrix, cm.colors(25) )
heatmap(dataMatrix, col = cm.colors(25) )
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
skip()
skip()
skip()
tapply(x, newClust, mean)
tapply(y, newClust, mean)
skip()
skip()
skip()
skip()
skip()
tapply(y, newClust, mean)
tapply(y, newClust, mean)
tapply(y,newClust2,mean)
skip()
skip()
skip()
skip()
skip()
skip()
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd()
svd
svd(mat)
skip()
skip()
prcomp(scalemat(mat))
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?read.csv
?separate
library("tidyr")
?separate
?str_detect()
?str_detect
library("stringr")
?str_detect
?lapply
library("lubridate")
?date
?lubridate
?lapply
?unite
library("tidyr")
?unite
library("readxl")
?readxl
?read_excel
?spread
library("tidyr")
?spread
rm(list=ls())
library(hflights)
install.packages("hflights")
library(hflights)
glympse(hflights)
glimpse(hflights)
glympse(hflights)
hflights
glympse(hflights)
glimplse(hflights)
glimpse(hflights)
library(dplyr)
glimpse(hflights)
library(dplyr)
library(hflights)
hflights <- tbl_df(hflights)
hflights
carriers <- hflights$UniqueCarrier
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
lut
hflights$Carrier <- lut[hflights$UniqueCarrier]
glimpse(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
hflights$Code <- lut[hflights$CancellationCode]
glimpse(hflights)
?select
?select
library(dplyr)
library(hflights)
?paste
?tailnum
?TailNum
library(dplyr)
library(hflights)
hflights <- tbl_df(hflights)
hflights
carriers <- hflights$UniqueCarrier
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
lut
hflights$Carrier <- lut[hflights$UniqueCarrier]
glimpse(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
hflights$Code <- lut[hflights$CancellationCode]
glimpse(hflights)
select(hflights, ActualElapsedTime, AirTime, ArrDelay, DepDelay)
select(hflights, Origin:Cancelled)
select(hflights, Year:DayOfWeek, ArrDelay:Diverted)
names(hflights)
select(hflights, ends_with("Delay"))
select(hflights, UniqueCarrier, ends_with("Num"), starts_with("Cancel"))
select(hflights, contains("Tim"), contains("Del"))
ex1r <- hflights[c("TaxiIn", "TaxiOut", "Distance")]
ex1d <- select(hflights, contains("Taxi"), Distance)
ex2r <- hflights[c("Year", "Month", "DayOfWeek", "DepTime", "ArrTime")]
ex2d <- select(hflights, Year:ArrTime, -DayofMonth)
ex3r <- hflights[c("TailNum", "TaxiIn", "TaxiOut")]
ex3d <- select(hflights, starts_with("T"))
g1 <- mutate(hflights, ActualGroundTime = ActualElapsedTime - AirTime)
g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)
g3 <- mutate(g2, AverageSpeed = Distance / AirTime * 60)
g3
m1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_ratio = loss / DepDelay)
m2 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, ActualGroundTime = ActualElapsedTime - AirTime, Diff = TotalTaxi - ActualGroundTime )
filter(hflights, Distance > 3000)
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))
filter(hflights, (TaxiOut + TaxiIn) > AirTime)
filter(hflights, DepTime < 500 | ArrTime > 2200)
filter(hflights, DepDelay > 0 , ArrDelay < 0)
filter(hflights, DepDelay > 0, Cancelled == 1)
c1 <- filter(hflights, Dest == "JFK")
c2 <- mutate(c1, Date = paste(Year, Month, DayofMonth, sep = "-"))
select(c2, Date, DepTime, ArrTime, TailNum)
filter(hflights, DayOfWeek %in% c(6,7), Distance > 1000, TaxiIn + TaxiOut < 15)
dtc <- filter(hflights, Cancelled == 1, !is.na(DepDelay))
arrange(dtc, DepDelay )
arrange(dtc, CancellationCode)
arrange(dtc, UniqueCarrier, DepDelay)
arrange(hflights, UniqueCarrier, desc(DepDelay))
arrange(hflights, DepDelay + ArrDelay)
library(dplyr)
library(hflights)
?lut
str(hflights)
hflights %>% group_by(Dest)
hflights %>%
group_by(Dest) %>%
summarise(Dest) %>%
hflights %>%
group_by(Dest) %>%
summarise() %>%
hflights %>%
group_by(Dest) %>%
summarise(Dest) %>%
hflights %>% group_by(Dest)
str(hflights)
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest))
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
filter(ndest == 1) %>%
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
filter(ndest == 1)
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
filter(ndest == 1)
hflights %>%
group_by(TailNum)
hflights %>%
group_by(TailNum) %>%
summarise(ndest = n_distinct(Dest)) %>%
filter(ndest == 1) %>%
summarise(nplanes = n())
hflights %>%
group_by(UniqueCarrier, Dest)
hflights %>%
group_by(UniqueCarrier, Dest) %>%
summarise(n = n())
hflights %>%
# create a combination carriers and destination
group_by(UniqueCarrier, Dest) %>%
#summarise by new variable n, UniqueCarrier-Dest combination
summarise(n = n()) %>%
#add column rank and descend by n
mutate(rank = rank(desc(n))) %>%
# select only the number one
filter(rank == 1)
hflights %>%
# create a combination carriers and destination
group_by(UniqueCarrier, Dest)
hflights %>%
# create a combination carriers and destination
group_by(UniqueCarrier, Dest) %>%
#summarise by new variable n, UniqueCarrier-Dest combination
summarise(n = n())
hflights %>%
# create a combination carriers and destination
group_by(UniqueCarrier, Dest) %>%
#summarise by new variable n, UniqueCarrier-Dest combination
summarise(n = n()) %>%
#add column rank and descend by n
mutate(rank = rank(desc(n)))
hflights %>%
# create a combination carriers and destination
group_by(UniqueCarrier, Dest) %>%
#summarise by new variable n, UniqueCarrier-Dest combination
summarise(n = n()) %>%
#add column rank and descend by n
mutate(rank = rank(desc(n))) %>%
# select only the number one
filter(rank == 1)
library(dplyr)
library(hflights)
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
library(dplyr)
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
library(dplyr)
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
library(hflights)
library(dplyr)
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
library(dplyr)
?setequal
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
install.packages("Lahman")
# Examine lahmanNames
library(Lahman)
lahmanNames
LahmanData
reduce(lahmanNames, intersect)
library(purrr)
reduce(lahmanNames, intersect)
lahmanNames
lahmanNames <- LahmanData
reduce(lahmanNames, intersect)
reduce(lahmanNames, intersect)
reduce(lahmanDAta, intersect)
reduce(lahmanData, intersect)
library(Lahman)
lahmanNames
lahmanNames
library(Lahman)
str(lahmanNames)
players
Lahman::Allstar
Lahman
LahmanData
sum
ds <- options(digits.secs=6) # so we can see the change
ds
x <- xts(1:10, as.POSIXct("2011-01-21") + c(1,1,1,2:8)/1e3)
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(quantmod)
start <- as.Date("2016-11-18")
end <- as.Date("2017-12-15")
ltcData <- getSymbols("LTC-USD", src = "yahoo", from = start, to = end, auto.assign = FALSE)
candleChart(ltcData, col=TRUE, theme=chartTheme('white'), log.scale=TRUE, name="LTC" )
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(cars)
summary(cars)
plot(pressure)
ret <- c(5, 2, 3, 7, 8, 3, 5, 9, 1, 4, 6, 3)
# First 6 months of returns
ret[1:6]
# Just March and May
ret[c("Mar","May")]
# Omit the first month of returns
ret[-1]
ret <- c(5, 2, 3, 7, 8, 3, 5, 9, 1, 4, 6, 3)
names(ret) <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# First 6 months of returns
ret[1:6]
# Just March and May
ret[c("Mar","May")]
# Omit the first month of returns
ret[-1]
library(jsonlite)
library(httr)
library(zoo)
library(R.utils)
library(devtools)
library(digest)
library(snakecase)
library(futile.logger)
library(data.table)
library(binancer)
setwd("~/rProgramming/Trading/crypto/")
rootdir <- "~/rProgramming/Trading/crypto/"
datadir <- "~/rProgramming/Trading/crypto/stockdata/"
functiondir <- "~/rProgramming/Trading/crypto/functions/"
Sys.setenv(TZ='America/New_York')
binance_key = "tFcWf6iX7cfa1IHCoXcRk1r4gP5KXNa4pM35jueTgugGStYQasHS6QGDR8xDl3oq"
binance_secret = "tjSXnPxqogrcq68bOmJpPQgi0cae8867Pll0ZxG2AJvb31sLvdgduSffXtpgEXbJ"
binance_credentials(binance_key, binance_secret)
DATA <- list()
prices_OMG <- get_klines("ETHUSDT", "4h", limit = 200)
head(prices_OMG)
time("UCT")
now
now()
Sys.time()
Sys.setenv(TZ="UCT")
prices_OMG <- get_klines("ETHUSDT", "4h", limit = 200)
head(prices_OMG)
prices_OMG <- get_klines("ETHUSDT", "1h", limit = 50)
tail(prices_OMG)
Sys.setenv(TZ='America/New_York')
prices_OMG <- get_klines("ETHUSDT", "1h", limit = 50)
head(prices_OMG)
Sys.timezone()
Sys.time()
tail(prices_OMG)
write.csv(df, file = "AADABTC.csv", sep = "," , row.names = FALSE)
